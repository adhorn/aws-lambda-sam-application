AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app1

  Sample SAM Template for sam-app1

Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        TABLE_NAME: newdb

Resources:
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
  Echo:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: application/
      Handler: echo.lambda_handler
      Runtime: python3.7
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /echo
            Method: get
            RestApiId:
              Ref: ServerlessRestApi
      AutoPublishAlias: live
      DeploymentPreference:
        Type: Canary10Percent5Minutes  
        Hooks:
          PreTraffic: !Ref PreTrafficHook
        Alarms:
          - !Ref AliasErrorMetricGreaterThanZeroAlarm
          - !Ref LatestVersionErrorMetricGreaterThanZeroAlarm

  GetItem:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: application/
      Handler: get.lambda_handler
      Runtime: python3.7
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /get/{item_id}
            Method: get
            RestApiId:
              Ref: ServerlessRestApi
      AutoPublishAlias: live
      Policies:
        - Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:GetItem"
            Resource:
              !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/newdb'
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "xray:PutTraceSegments"
              - "xray:PutTelemetryRecords"
            Resource:
              - "*"

  CreateItem:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: application/
      Handler: post.lambda_handler
      Runtime: python3.7
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /create
            Method: post
            RestApiId:
              Ref: ServerlessRestApi
      AutoPublishAlias: live
      Policies:
        - Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:PutItem"
            Resource:
              !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/newdb'
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "xray:PutTraceSegments"
              - "xray:PutTelemetryRecords"
            Resource:
              - "*"

  AliasErrorMetricGreaterThanZeroAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub "${GetItem}:live"
        - Name: FunctionName
          Value: !Ref GetItem
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
  
  LatestVersionErrorMetricGreaterThanZeroAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub "${GetItem}:live"
        - Name: FunctionName
          Value: !Ref GetItem
        - Name: ExecutedVersion
          Value: !GetAtt GetItem.Version.Version
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0


  PreTrafficHook:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pre-traffic-hook/
      Handler: get.lambda_handler
      Policies:
        - Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
              - "codedeploy:PutLifecycleEventHookExecutionStatus"
            Resource:
              !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
        - Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
              - "lambda:InvokeFunction"
            Resource: 
             - !GetAtt GetItem.Arn
             - !Ref GetItem.Version
      Runtime: python3.7
      FunctionName: 'CodeDeployHook_preTrafficHook'
      DeploymentPreference:
        Enabled: False
        Role: ""
      Timeout: 5
      Environment:
        Variables:
              CurrentVersion: !Ref GetItem.Version  # [docs] recommended to pass the lambda version through the Environment Variables

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApplicationAPI:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  GetItem:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt GetItem.Arn
  GetItemIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt GetItemRole.Arn
  CreateItem:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt CreateItem.Arn
  CreateItemIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt CreateItemRole.Arn